<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git-clone加速</title>
    <url>/2020/01/20/Git1.--%E5%9B%BD%E5%86%85git-clone%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="0-国内为什么速度会慢"><a href="#0-国内为什么速度会慢" class="headerlink" title="0. 国内为什么速度会慢"></a>0. 国内为什么速度会慢</h1><ul>
<li>github的服务器在国外</li>
<li>gfw</li>
</ul>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><blockquote>
<p>这里就不在推荐修改dns的做法，我也尝试过，不仅麻烦，速度还是不稳定。</p>
</blockquote>
<h2 id="1-拥有科学上网的能力"><a href="#1-拥有科学上网的能力" class="headerlink" title="1. 拥有科学上网的能力"></a>1. 拥有科学上网的能力</h2><blockquote>
<p>如果是计算机相关专业的学生或者软件开发人员，只会用百度，我觉得是一件很可悲的事。</p>
</blockquote>
<h2 id="2-配置git"><a href="#2-配置git" class="headerlink" title="2. 配置git"></a>2. 配置git</h2><h3 id="2-1-配置socks5代理"><a href="#2-1-配置socks5代理" class="headerlink" title="2.1 配置socks5代理"></a>2.1 配置socks5代理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:对应的端口号&#39;</span><br><span class="line">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:对应的端口号&#39;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-取消代理"><a href="#2-2-取消代理" class="headerlink" title="2.2 取消代理"></a>2.2 取消代理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>

<p>配置完之后，enjoy你的带宽跑满的愉悦。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>你真的会用github搜索吗?</title>
    <url>/2020/01/21/Git2.-github%E9%AA%9A%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p><strong>整理自尚硅谷周阳老师</strong></p>
<h2 id="1-常用词"><a href="#1-常用词" class="headerlink" title="1.常用词"></a>1.常用词</h2><h3 id="watch："><a href="#watch：" class="headerlink" title="watch："></a>watch：</h3><p>对于别人的项目，默认自己都处于 Not watching 的状态，当你选择 Watching，表示你以后会关注这个项目的所有动态，这个项目以后只要发生变动，如被别人提交了 pull request、被别人发起了issue等等情况，你都会在自己的个人通知中心，收到一条通知消息，如果你设置了个人邮箱，那么你的邮箱也可能收到相应的邮件。</p>
<h3 id="stars："><a href="#stars：" class="headerlink" title="stars："></a>stars：</h3><p>星星，相当于点赞，不过这个赞需要得到程序员小伙伴的认可才会被star</p>
<h3 id="fork："><a href="#fork：" class="headerlink" title="fork："></a>fork：</h3><p>把当前项目拷贝一份到自己账号下</p>
<h2 id="2-in限制搜索"><a href="#2-in限制搜索" class="headerlink" title="2.in限制搜索"></a>2.in限制搜索</h2><p><strong>以springboot项目为例：</strong></p>
<h3 id="2-1-直接检索"><a href="#2-1-直接检索" class="headerlink" title="2.1.直接检索"></a>2.1.直接检索</h3><h3 id="2-2-用in限制搜索"><a href="#2-2-用in限制搜索" class="headerlink" title="2.2.用in限制搜索"></a>2.2.用in限制搜索</h3><h4 id="2-2-1-关键词-in-name"><a href="#2-2-1-关键词-in-name" class="headerlink" title="2.2.1 关键词 in:name"></a>2.2.1 <code>关键词 in:name</code></h4><h4 id="2-2-2-关键词-in-description"><a href="#2-2-2-关键词-in-description" class="headerlink" title="2.2.2 关键词 in:description"></a>2.2.2 <code>关键词 in:description</code></h4><h4 id="2-2-3-关键词-in-readme"><a href="#2-2-3-关键词-in-readme" class="headerlink" title="2.2.3 关键词 in:readme"></a>2.2.3 <code>关键词 in:readme</code></h4><h4 id="2-2-4-关键词-in-xx-yy-zz组合"><a href="#2-2-4-关键词-in-xx-yy-zz组合" class="headerlink" title="2.2.4 关键词 in:xx,yy,zz组合"></a>2.2.4 <code>关键词 in:xx,yy,zz组合</code></h4><h2 id="3-基于star和fork范围搜索"><a href="#3-基于star和fork范围搜索" class="headerlink" title="3.基于star和fork范围搜索"></a>3.基于star和fork范围搜索</h2><h3 id="3-1-基于stars"><a href="#3-1-基于stars" class="headerlink" title="3.1 基于stars"></a>3.1 基于stars</h3><h4 id="3-1-1-stars多于xx："><a href="#3-1-1-stars多于xx：" class="headerlink" title="3.1.1 stars多于xx："></a>3.1.1 stars多于xx：</h4><p><code>关键词 stars:数量</code></p>
<h4 id="3-1-2-stars数在某个区间"><a href="#3-1-2-stars数在某个区间" class="headerlink" title="3.1.2 stars数在某个区间"></a>3.1.2 stars数在某个区间</h4><p><code>关键词 stars:xx..yy</code></p>
<h3 id="3-2-基于fork数"><a href="#3-2-基于fork数" class="headerlink" title="3.2 基于fork数"></a>3.2 基于fork数</h3><h4 id="3-2-1-fork多余xx"><a href="#3-2-1-fork多余xx" class="headerlink" title="3.2.1 fork多余xx"></a>3.2.1 fork多余xx</h4><p><code>关键词 forks:&gt;=xx</code></p>
<h4 id="3-2-2-fork数在某个区间"><a href="#3-2-2-fork数在某个区间" class="headerlink" title="3.2.2 fork数在某个区间"></a>3.2.2 fork数在某个区间</h4><p>`</p>
<h3 id="3-3-多级组合"><a href="#3-3-多级组合" class="headerlink" title="3.3 多级组合"></a>3.3 多级组合</h3><p>可将多种检索规则组合<br>例：Springboot forks:&gt;=5000 stars:&gt;=5000 in:name</p>
<h2 id="4-awesome搜索"><a href="#4-awesome搜索" class="headerlink" title="4.awesome搜索"></a>4.awesome搜索</h2><p><code>awesome 关键字</code><br>可搜索到堪比（甚至优于）官网文档的学习资源</p>
<h2 id="5-L数字"><a href="#5-L数字" class="headerlink" title="5.#L数字"></a>5.#L数字</h2><blockquote>
<p>功能：高亮代码行</p>
</blockquote>
<h3 id="5-1-L数字"><a href="#5-1-L数字" class="headerlink" title="5.1 #L数字"></a>5.1 #L数字</h3><p>例：<a href="https://github.com/527515025/springBoot/blob/master/springboot-mybatis2/src/main/java/cn/abel/Application.java#L11" target="_blank" rel="noopener">https://github.com/527515025/springBoot/blob/master/springboot-mybatis2/src/main/java/cn/abel/Application.java#L11</a></p>
<h3 id="5-2-L数字1-L数字2"><a href="#5-2-L数字1-L数字2" class="headerlink" title="5.2 #L数字1..#L数字2"></a>5.2 #L数字1..#L数字2</h3><p>例：<a href="https://github.com/527515025/springBoot/blob/master/springboot-mybatis2/src/main/java/cn/abel/Application.java#L11..L16" target="_blank" rel="noopener">https://github.com/527515025/springBoot/blob/master/springboot-mybatis2/src/main/java/cn/abel/Application.java#L11..L16</a></p>
<h2 id="6-T搜索"><a href="#6-T搜索" class="headerlink" title="6.T搜索"></a>6.T搜索</h2><blockquote>
<p>功能：在项目内搜索<br>进入项目主页：<a href="https://github.com/527515025/springBoot" target="_blank" rel="noopener">https://github.com/527515025/springBoot</a></p>
</blockquote>
<p>按<code>T</code>后可查看代码文件</p>
<h6 id="tips-谷歌浏览器可通过安装插件octoree更好的阅读代码和查看层级目录"><a href="#tips-谷歌浏览器可通过安装插件octoree更好的阅读代码和查看层级目录" class="headerlink" title="tips:谷歌浏览器可通过安装插件octoree更好的阅读代码和查看层级目录"></a>tips:谷歌浏览器可通过安装插件octoree更好的阅读代码和查看层级目录</h6><h2 id="7-搜索区域活跃用户（大佬）"><a href="#7-搜索区域活跃用户（大佬）" class="headerlink" title="7.搜索区域活跃用户（大佬）"></a>7.搜索区域活跃用户（大佬）</h2><p><code>location:地区 language:编程语言</code></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>github搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习资源整理</title>
    <url>/2020/02/02/Java0.-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<h3 id="github"><a href="#github" class="headerlink" title="github:"></a>github:</h3><ul>
<li><p><a href="https://github.com/akullpp/awesome-java" target="_blank" rel="noopener">awesome-java</a></p>
</li>
<li><p><a href="https://github.com/Snailclimb/awesome-java" target="_blank" rel="noopener">awesome-java</a></p>
</li>
<li><p><a href="https://github.com/jobbole/awesome-java-cn" target="_blank" rel="noopener">awesome-java-cn</a></p>
</li>
<li><p><a href="https://github.com/Blankj/awesome-java-leetcode" target="_blank" rel="noopener">awesome-java-leetcode</a></p>
</li>
<li><p><a href="https://github.com/sorenduan/awesome-java-books" target="_blank" rel="noopener">awesome-java-books</a></p>
</li>
</ul>
<h3 id="book"><a href="#book" class="headerlink" title="book"></a>book</h3><ul>
<li><p><a href="https://weread.qq.com/web/reader/b51320f05e159eb51b29226kc81322c012c81e728d9d180" target="_blank" rel="noopener">Java编程的逻辑</a></p>
</li>
<li><ul>
<li><a href="https://github.com/swiftma/program-logic" target="_blank" rel="noopener">配套代码</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java资源</tag>
      </tags>
  </entry>
  <entry>
    <title>bashrc修改导致linux系统指令不能用的解决方案</title>
    <url>/2019/10/20/Linux1.-bashrc%E6%96%87%E4%BB%B6%E6%9B%B4%E6%94%B9%E5%AF%BC%E8%87%B4linux%E7%B3%BB%E7%BB%9F%E6%8C%87%E4%BB%A4%E4%B8%8D%E8%83%BD%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>参考博客:</p>
<ul>
<li><a href="https://www.cnblogs.com/chenglee/p/7476852.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenglee/p/7476852.html</a></li>
</ul>
<p>解决方案：</p>
<p>重新赋予环境变量PATH就行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>bashrc</tag>
      </tags>
  </entry>
  <entry>
    <title>项目requirements生成</title>
    <url>/2019/11/11/Python2.-%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90requirements/</url>
    <content><![CDATA[<p>1.下载pipreqs</p>
<p><code>pip install pipreqs</code></p>
<p>2.进入cmd命令行,进入到项目目录的上级目录</p>
<p><code>pipreqs 项目名</code></p>
<p>3.安装requirements</p>
<p><code>pip install -r requirements.txt</code></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>requirements</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟环境和包管理</title>
    <url>/2019/12/01/Python1.-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8C%85%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="1-创建虚拟环境"><a href="#1-创建虚拟环境" class="headerlink" title="1.创建虚拟环境"></a>1.创建虚拟环境</h2><p><code>python - m venv 虚拟环境名</code></p>
<h2 id="2-启动虚拟环境"><a href="#2-启动虚拟环境" class="headerlink" title="2.启动虚拟环境"></a>2.启动虚拟环境</h2><h6 id="win"><a href="#win" class="headerlink" title="win:"></a>win:</h6><p><code>虚拟环境名\Scripts\activate.bat</code></p>
<h6 id="mac-linux"><a href="#mac-linux" class="headerlink" title="mac/linux:"></a>mac/linux:</h6><p><code>source 虚拟环境名/bin/activate</code></p>
<h2 id="3-退出虚拟环境deactivate"><a href="#3-退出虚拟环境deactivate" class="headerlink" title="3.退出虚拟环境deactivate"></a>3.退出虚拟环境<strong><code>deactivate</code></strong></h2><h2 id="4-pip管理包"><a href="#4-pip管理包" class="headerlink" title="4.pip管理包"></a>4.pip管理包</h2><p><code>pip install 包名</code></p>
<h2 id="5-生成requirements-txt"><a href="#5-生成requirements-txt" class="headerlink" title="5.生成requirements.txt"></a>5.生成<strong>requirements.txt</strong></h2><p><code>pip freeze &gt; requirements.txt</code></p>
<h2 id="6-使用requirements-txt"><a href="#6-使用requirements-txt" class="headerlink" title="6.使用requirements.txt"></a>6.使用<strong>requirements.txt</strong></h2><p><code>pip install -r requirements.txt</code></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>虚拟环境</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>内置sorted和list.sort()的对比与使用</title>
    <url>/2019/12/12/Python4.-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0sorted%E5%92%8Clist.sort()%E7%9A%84%E5%AF%B9%E6%AF%94%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h1><ul>
<li><a href="https://docs.python.org/3.7/tutorial/datastructures.html?highlight=sort" target="_blank" rel="noopener">list.sort()</a></li>
<li><a href="https://docs.python.org/3.7/library/functions.html#sorted" target="_blank" rel="noopener">sorted()</a></li>
<li><a href="https://docs.python.org/3.7/howto/sorting.html#sortinghowto" target="_blank" rel="noopener">sorting how to do</a></li>
</ul>
<h1 id="sorted-iterable-key-None-reverse-False"><a href="#sorted-iterable-key-None-reverse-False" class="headerlink" title="sorted(iterable, *, key=None, reverse=False)"></a>sorted(iterable, *, key=None, reverse=False)</h1><blockquote>
<p>python3中移除了cmp</p>
</blockquote>
<h2 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h2><ul>
<li>iterable:迭代器，可迭代的元素</li>
<li>key:主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。默认为空,可传函数和匿名函数</li>
<li>reverse：排序规则，reverse = True 降序， reverse = False 升序（默认）</li>
</ul>
<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>从可迭代的项目中返回新的排序列表。</p>
<h1 id="list-sort-key-None-reverse-False"><a href="#list-sort-key-None-reverse-False" class="headerlink" title="list.sort(key=None, reverse=False)"></a>list.sort(key=None, reverse=False)</h1><h2 id="参数说明：-1"><a href="#参数说明：-1" class="headerlink" title="参数说明："></a>参数说明：</h2><ul>
<li>key:主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。默认为空,可传函数和匿名函数</li>
<li>reverse：排序规则，reverse = True 降序， reverse = False 升序（默认）</li>
</ul>
<h2 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h2><p>无返回值，改变原list</p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例:"></a>实例:</h1><h2 id="list-sort-key-匿名函数"><a href="#list-sort-key-匿名函数" class="headerlink" title="list.sort(key=匿名函数)"></a>list.sort(key=匿名函数)</h2><h2 id="list-sort-key-匿名函数-reverse-True"><a href="#list-sort-key-匿名函数-reverse-True" class="headerlink" title="list.sort(key=匿名函数,reverse=True)"></a>list.sort(key=匿名函数,reverse=True)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random = [(<span class="number">2</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)]</span><br><span class="line">random.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">print(random)//[(<span class="number">4</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line">random.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line">print(random)//[(<span class="number">3</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">4</span>, <span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<h2 id="sorted-list-key-lambda"><a href="#sorted-list-key-lambda" class="headerlink" title="sorted(list,key=lambda)"></a>sorted(list,key=lambda)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random = [(<span class="number">2</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)]</span><br><span class="line">print(sorted(random,key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>]))//[(<span class="number">4</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line">print(random)//[(<span class="number">2</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)]</span><br></pre></td></tr></table></figure>
<p>sorted(list)排序完生成一个新的list，原始list并未改变</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode cpp代码缩减runtime</title>
    <url>/2019/10/03/leetcode%E4%B8%AD%E6%8F%90%E5%8D%87%E4%BB%A3%E7%A0%81IO%E9%80%9F%E5%BA%A6/</url>
    <content><![CDATA[<p>在leetcode第11题看到一个题解，添加到代码前面，大幅缩减runtime</p>
<p>代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static int speedup&#x3D;[]()&#123;</span><br><span class="line">	ios_base::sync_with_stdio(false);</span><br><span class="line">	cin.tie(nullptr);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>

<p>leetcode11题解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static int speedup&#x3D;[]()&#123;</span><br><span class="line">	ios_base::sync_with_stdio(false);</span><br><span class="line">	cin.tie(nullptr);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;();</span><br><span class="line">class Solution</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int maxArea(vector&lt;int&gt; &amp;height)</span><br><span class="line">    &#123;</span><br><span class="line">        int i &#x3D; 0, j &#x3D; height.size() - 1, water &#x3D; 0;</span><br><span class="line">        while (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            int h &#x3D; min(height[i], height[j]);</span><br><span class="line">            water &#x3D; max(water, (j - i) * h);</span><br><span class="line">            while (height[i] &lt;&#x3D; h &amp;&amp; i &lt; j)</span><br><span class="line">                i++;</span><br><span class="line">            while (height[j] &lt;&#x3D; h &amp;&amp; i &lt; j)</span><br><span class="line">                j--;</span><br><span class="line">        &#125;</span><br><span class="line">        return water;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈我为什么将博客迁移到GitHub</title>
    <url>/2020/03/10/%E6%9D%82%E8%B0%881.-%E8%B0%88%E8%B0%88%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B0%86%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0GitHub-wiki/</url>
    <content><![CDATA[<p>从17年开始有想写博客的冲动，先后尝试过51，简书，博客园，牛客网博客，自建wordpress，typo，最后稳定csdn快一年半多。</p>
<p>自建站点很麻烦，需要自己去写配置，做页面美化，vps还会攻击，每年的vps+域名付费也让我这个学生党有点小难受，做维护需要一定的精力，搞过两个月的自建博客就放弃了。</p>
<p>csdn一直是毒瘤，很多博客的都是copy后不加转载的原创，虽然很讨厌，但也一直在用，这次写了一篇关于国内git clone速度慢的解决方案，</p>
<p><img src="https://github.com/WadeStack/note/blob/master/images/csdn-error.png" alt=""></p>
<p>提了一句科学上网，然后审核就不通过，我就很无奈了，再加越来越多的广告和限制。自此放弃博客平台，转入github，使用github page+hexo。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>一个后端开发工程师需要掌握什么</title>
    <url>/2020/03/21/%E6%9D%82%E8%B0%882.-%E4%B8%80%E4%B8%AA%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9C%80%E8%A6%81%E5%AD%A6%E7%82%B9%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h1 id="Java方向"><a href="#Java方向" class="headerlink" title="Java方向"></a>Java方向</h1><p>JavaSE</p>
<ul>
<li>面向对象</li>
<li>并发</li>
<li>JVM</li>
<li>GC</li>
<li>常用类库</li>
</ul>
<p>JavaEE</p>
<ul>
<li>Spring</li>
<li>Hibernate</li>
<li>SpringMVC</li>
<li>SpringBoot</li>
<li>SpringCloud</li>
<li>Mybatis</li>
<li>Druid</li>
<li>Swagger</li>
<li>Apache Shiro</li>
<li>Spring Security</li>
<li>Spring Data</li>
</ul>
<p>打包部署</p>
<ul>
<li>Maven</li>
<li>Docker</li>
</ul>
<h1 id="Python方向"><a href="#Python方向" class="headerlink" title="Python方向"></a>Python方向</h1><p>Python基础</p>
<ul>
<li><p>Flask</p>
</li>
<li><p>Django</p>
</li>
</ul>
<h1 id="通用学习"><a href="#通用学习" class="headerlink" title="通用学习"></a>通用学习</h1><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul>
<li>Vue</li>
<li>BootStrap</li>
<li>Layui</li>
</ul>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul>
<li>Nginx</li>
</ul>
<h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li>MySQL</li>
<li>Redis</li>
<li>MongoDB</li>
</ul>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><ul>
<li><p>Elasticsearch</p>
</li>
<li><p>solr</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>不用加减乘除做加法</title>
    <url>/2019/10/10/%E7%AE%97%E6%B3%951.-%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95/</url>
    <content><![CDATA[<h1 id="1-位运算"><a href="#1-位运算" class="headerlink" title="1.位运算"></a>1.位运算</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链接：https://www.nowcoder.com/questionTerminal/59ac416b4b944300b617d4f7f111b215</span></span><br><span class="line"><span class="comment">//来源：牛客网</span></span><br><span class="line"><span class="comment">//Java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (num2!=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = num1^num2;</span><br><span class="line">            num2 = (num1&amp;num2)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">            num1 = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>        </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num2?Add(num1^num2,(num1&amp;num2)&lt;&lt;<span class="number">1</span>):num1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="2-汇编"><a href="#2-汇编" class="headerlink" title="2.汇编"></a>2.汇编</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;链接：https:&#x2F;&#x2F;www.nowcoder.com&#x2F;questionTerminal&#x2F;59ac416b4b944300b617d4f7f111b215</span><br><span class="line">&#x2F;&#x2F;来源：牛客网</span><br><span class="line">int add(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">    _asm</span><br><span class="line">    &#123;</span><br><span class="line">        MOV EAX, a</span><br><span class="line">        MOV ECX, b</span><br><span class="line">        ADD EAX, ECX</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3-自增自减"><a href="#3-自增自减" class="headerlink" title="3.自增自减"></a>3.自增自减</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链接：https://www.nowcoder.com/questionTerminal/59ac416b4b944300b617d4f7f111b215</span></span><br><span class="line"><span class="comment">//来源：牛客网</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num1&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(num1--!=<span class="number">0</span>)</span><br><span class="line">                num2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num1&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(num1++!=<span class="number">0</span>)</span><br><span class="line">                num2--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4-通过指针"><a href="#4-通过指针" class="headerlink" title="4.通过指针"></a>4.通过指针</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链接：https://www.nowcoder.com/questionTerminal/59ac416b4b944300b617d4f7f111b215</span></span><br><span class="line"><span class="comment">//来源：牛客网</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>* a = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(num1);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">long</span>&gt;(&amp;(a[num2]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="5-通过函数"><a href="#5-通过函数" class="headerlink" title="5.通过函数"></a>5.通过函数</h1> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> Integer.sum(num1, num2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="6-Integer-sum-源码"><a href="#6-Integer-sum-源码" class="headerlink" title="6.Integer.sum()源码"></a>6.Integer.sum()源码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>我的win端安装软件</title>
    <url>/2020/03/20/%E6%9D%82%E8%B0%883.-%E6%88%91%E7%9A%84WIN%E7%AB%AF%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul>
<li>Interlij IDEA</li>
<li>Pycharm</li>
<li>Maven</li>
<li>Tomcat</li>
<li>Git</li>
<li>Robo3t</li>
<li>Navicat</li>
<li>Sublime</li>
<li>Redis Manager</li>
</ul>
<p>数据库</p>
<ul>
<li>MySQL</li>
<li>Redis</li>
<li>MongoDB</li>
</ul>
<h2 id="语言环境"><a href="#语言环境" class="headerlink" title="语言环境"></a>语言环境</h2><ul>
<li>JDK 1.8+</li>
<li>Python3.6+</li>
</ul>
<h2 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h2><ul>
<li>postman</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>VirtualBox</li>
<li>Typora</li>
<li>百度网盘</li>
<li>Telegram</li>
<li>Snipaste</li>
<li>Xmind</li>
<li>Xshell</li>
<li>MobaXterm</li>
<li>谷歌浏览器</li>
<li>kxsw工具包</li>
<li>极速PDF阅读器</li>
</ul>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>常用软件</tag>
      </tags>
  </entry>
  <entry>
    <title>写一个函数找出一个整数数组中，第二大的数</title>
    <url>/2019/09/09/%E7%AE%97%E6%B3%952.-%E5%86%99%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E6%89%BE%E5%87%BA%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E6%95%B0%E7%BB%84%E4%B8%AD%EF%BC%8C%E7%AC%AC%E4%BA%8C%E5%A4%A7%E7%9A%84%E6%95%B0/</url>
    <content><![CDATA[<h2 id="扩展问题："><a href="#扩展问题：" class="headerlink" title="扩展问题："></a>扩展问题：</h2><ol>
<li>写一个函数找出一个整数数组中，第k大的数（堆排序）</li>
</ol>
<h2 id="考虑的情况："><a href="#考虑的情况：" class="headerlink" title="考虑的情况："></a>考虑的情况：</h2><ol>
<li>数组长度&lt;2</li>
<li>数组元素全部相同</li>
<li>第二大值不止一个</li>
</ol>
<h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><ul>
<li><p>实现1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现： 返回第二大值</span></span><br><span class="line"><span class="comment">     * 1. 数组长度小于2，不存在第二大的值，返回-1</span></span><br><span class="line"><span class="comment">     * 2. 数组长度为2，返回两者中最小值</span></span><br><span class="line"><span class="comment">     * 3. 从前往后遍历一遍</span></span><br><span class="line"><span class="comment">     * 3.1 比最大值大，次大值变为最大值，最大值变为当前值</span></span><br><span class="line"><span class="comment">     * 3.2 只比次大值大，次大值变为当前值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 第二大值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max2</span><span class="params">(Integer[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] &gt; a[<span class="number">1</span>] ? a[<span class="number">1</span>] : a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> max1 = a[<span class="number">0</span>] &gt; a[<span class="number">1</span>] ? a[<span class="number">0</span>] : a[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> max2 = a[<span class="number">0</span>] &gt; a[<span class="number">1</span>] ? a[<span class="number">1</span>] : a[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &gt; max1) &#123;</span><br><span class="line">                    max2 = max1;</span><br><span class="line">                    max1 = a[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt; max2)</span><br><span class="line">                    max2 = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> max2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现2：先快排，再返回第二大的值</p>
</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>堆排序</tag>
      </tags>
  </entry>
  <entry>
    <title>BF和KMP的cpp代码实现</title>
    <url>/2019/09/10/%E7%AE%97%E6%B3%954.-BF%E5%92%8CKMP/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BF算法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BF</span><span class="params">(<span class="keyword">char</span> S[ ], <span class="keyword">char</span> T[ ])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> S[]=<span class="string">"abcabcabcaccb"</span>;</span><br><span class="line">    <span class="keyword">char</span> T[]=<span class="string">"abcacc"</span>;</span><br><span class="line">    <span class="keyword">int</span> index=BF(S,T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; index; i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;T&lt;&lt;<span class="string">"在"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;S&lt;&lt;<span class="string">"中的位置是："</span>&lt;&lt;index&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BF</span><span class="params">(<span class="keyword">char</span> S[ ], <span class="keyword">char</span> T[ ])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;                            <span class="comment">//主串从下标0开始第一趟匹配</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;                           <span class="comment">//设置比较的起始下标</span></span><br><span class="line">    <span class="keyword">while</span> ((S[i] != <span class="string">'\0'</span>) &amp;&amp; (T[j] != <span class="string">'\0'</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (S[i] == T[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            index++;    <span class="comment">//i和j分别回溯</span></span><br><span class="line">            i = index;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (T[j] == <span class="string">'\0'</span>)</span><br><span class="line">        <span class="keyword">return</span> index + <span class="number">1</span>;      <span class="comment">//返回本趟匹配的开始位置（不是下标）</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//KMP算法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="keyword">char</span> T[ ], <span class="keyword">int</span> next[ ])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">char</span> S[],<span class="keyword">char</span> T[])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>  S[]=<span class="string">"ababcabcacbab"</span>;</span><br><span class="line">    <span class="keyword">char</span>  T[]=<span class="string">"abcac"</span>;</span><br><span class="line">    <span class="keyword">int</span> index = KMP(S,T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; index; i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;T&lt;&lt;<span class="string">"在"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;S&lt;&lt;<span class="string">"中的位置是："</span>&lt;&lt;index&lt;&lt;<span class="built_in">endl</span>;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">char</span> S[],<span class="keyword">char</span> T[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> next[<span class="number">80</span>] = &#123;<span class="number">-1</span>&#125;;</span><br><span class="line">    GetNext(T,next);</span><br><span class="line">    <span class="keyword">while</span> (S[i] != <span class="string">'\0'</span> &amp;&amp; T[j] != <span class="string">'\0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(S[i] == T[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(T[j] == <span class="string">'\0'</span>)</span><br><span class="line">        <span class="keyword">return</span> i - <span class="built_in">strlen</span>(T) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetNext</span><span class="params">(<span class="keyword">char</span> T[], <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, len;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; T[j]!=<span class="string">'\0'</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (len = j - <span class="number">1</span>; len &gt;= <span class="number">1</span>; len--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">                <span class="keyword">if</span>(T[i] != T[j-len+i])</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == len)</span><br><span class="line">            &#123;</span><br><span class="line">                next[j] = len;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">1</span>)</span><br><span class="line">            next[j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以下为改进的蛮力算法</span></span><br><span class="line"><span class="comment">void GetNext(char T[ ], int next[ ])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	int j = 0, k = -1;</span></span><br><span class="line"><span class="comment">	next[0] = -1;</span></span><br><span class="line"><span class="comment">	while (T[j] != '\0')                           //直到字符串末尾</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		if (k == -1) &#123;                           //无相同子串</span></span><br><span class="line"><span class="comment">			next[++j] = 0; k = 0;</span></span><br><span class="line"><span class="comment">		&#125;else if (T[j] == T[k]) &#123;                //确定next[j+1]的值</span></span><br><span class="line"><span class="comment">				k++;</span></span><br><span class="line"><span class="comment">				next[++j] = k;</span></span><br><span class="line"><span class="comment">			&#125; else k = next[k];          //取T[0]...T[j]的下一个相等子串的长度</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//留着补充BM算法</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>KMP</tag>
        <tag>BF</tag>
      </tags>
  </entry>
  <entry>
    <title>三个数中求最大最小值</title>
    <url>/2019/09/10/%E7%AE%97%E6%B3%953.-%E4%B8%89%E4%B8%AA%E6%95%B0%E4%B8%AD%E6%B1%82%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%80%BC/</url>
    <content><![CDATA[<p>以最小值代码分析：</p>
<p>1.先用a和b比较，得到a、b中较小的那个数，再和c比较，最后得到最小值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int max(int a,int b,int c)</span><br><span class="line">&#123;</span><br><span class="line">	if(a&lt;b)</span><br><span class="line">		return a&lt;c?a:c;</span><br><span class="line">	else</span><br><span class="line">		return b&lt;c?b:c; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.三个数的大小无非三种情况，a最小，b最小或者c最小，将三种情况直接列出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int max(int a,int b,int c)</span><br><span class="line">&#123;</span><br><span class="line">	if(a&lt;&#x3D;b &amp;&amp; a&lt;&#x3D;c)</span><br><span class="line">		return a;</span><br><span class="line">	else if(b&lt;&#x3D;a &amp;&amp; b&lt;&#x3D;c)</span><br><span class="line">		return b;</span><br><span class="line">	else if(c&lt;&#x3D;a &amp;&amp; c&lt;&#x3D;b)</span><br><span class="line">		return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.先用a、b分别和c比较，得到a、c中的较小和b、c中的较小，两个较小比较得到三个数中的最小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int max(int a,int b,int c)</span><br><span class="line">&#123;</span><br><span class="line">	return a&lt;b?(a&lt;c?a:c):(b&lt;c?b:c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.先用a和b比较，得到a、b中较小的那个数，再和c比较，最后得到最小值。</p>
<p>这一条是1.的三目运算符的实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int max(int a,int b,int c)</span><br><span class="line">&#123;</span><br><span class="line">	return (a&lt;b?a:b)&lt;c?(a&lt;b?a:b):c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>最值</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制中1的个数</title>
    <url>/2019/09/11/%E7%AE%97%E6%B3%955.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
    <content><![CDATA[<h1 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h1><h1 id="1-移位-计数"><a href="#1-移位-计数" class="headerlink" title="1.移位+计数"></a>1.移位+计数</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BitCount1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((n &amp; <span class="number">1</span>) == <span class="number">1</span>) <span class="comment">// 当前位是1</span></span><br><span class="line">            ++c ; <span class="comment">// 计数器加1</span></span><br><span class="line">        n &gt;&gt;=<span class="number">1</span> ; <span class="comment">// 移位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-按1消除"><a href="#2-按1消除" class="headerlink" title="2.按1消除"></a>2.按1消除</h2><p>如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。<br>举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.我们发现减1的结果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。如1100&amp;1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。</p>
<p>链接：<a href="https://www.nowcoder.com/questionTerminal/8ee967e43c2c4ec193b040ea7fbb10b8?answerType=1&f=discussion" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal/8ee967e43c2c4ec193b040ea7fbb10b8?answerType=1&amp;f=discussion</a><br>来源：牛客网</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BitCount2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span> (c =<span class="number">0</span>; n!=; ++c)</span><br><span class="line">        n &amp;= (n -<span class="number">1</span>) ; <span class="comment">// 清除最低位的1</span></span><br><span class="line">    <span class="keyword">return</span> c ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BitCount2的while实现版</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BitCount2_1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">    c++;</span><br><span class="line">    n &amp;= (n-<span class="number">1</span>); <span class="comment">// 清除最低位的1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BitCount2的终极蛇皮简化版</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BitCount2_2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( ; n; ++c, n &amp;= (n -<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> c ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-分治法"><a href="#3-分治法" class="headerlink" title="3.分治法"></a>3.分治法</h2><p>一个整数可以转为一个32位2进制数，统计32个位元中为1的个数，转化为统计2组16个位元为1的个数,统计16个位元为1的个数的问题有转化为统计2组16个位元为1的个数，分治到统计2个位元为1的个数。</p>
<blockquote>
<p>参考自《算法心得》<br>另还有3位段切分和4位段切分（统计x位段中为1的位元个数），详见《算法心得》</p>
</blockquote>
<p><img src="https://uploadfiles.nowcoder.com/images/20200312/1871642_1584015902259_08DBC6EC7EDDC430E1F5F434BBA21342" alt="图片说明" title="图片标题"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int BitCount3(int x)&#123;</span><br><span class="line">    x &#x3D; (x &amp; 0x55555555) + ((x &gt;&gt;&gt; 1) &amp; 0x55555555);</span><br><span class="line">    x &#x3D; (x &amp; 0x33333333) + ((x &gt;&gt;&gt; 2) &amp; 0x33333333);</span><br><span class="line">    x &#x3D; (x &amp; 0x0f0f0f0f) + ((x &gt;&gt;&gt; 4) &amp; 0x0f0f0f0f);</span><br><span class="line">    x &#x3D; (x &amp; 0x00ff00ff) + ((x &gt;&gt;&gt; 8) &amp; 0x00ff00ff);</span><br><span class="line">    x &#x3D; (x &amp; 0x0000ffff) + ((x &gt;&gt;&gt; 16) &amp; 0x0000ffff);</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-Integer-bitCount"><a href="#4-Integer-bitCount" class="headerlink" title="4.Integer.bitCount"></a>4.Integer.bitCount</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BitCount4</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// HD, Figure 5-2</span></span><br><span class="line">    i = i - ((i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">    i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">    i = (i + (i &gt;&gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0f0f0f0f</span>;</span><br><span class="line">    i = i + (i &gt;&gt;&gt; <span class="number">8</span>);</span><br><span class="line">    i = i + (i &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> i &amp; <span class="number">0x3f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>二进制总结</title>
    <url>/2019/02/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%801.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="1-编码"><a href="#1-编码" class="headerlink" title="1.编码"></a>1.编码</h3><table>
<thead>
<tr>
<th align="left"></th>
<th align="left">正数</th>
<th align="left">负数</th>
</tr>
</thead>
<tbody><tr>
<td align="left">原码</td>
<td align="left">0本体</td>
<td align="left">1本体</td>
</tr>
<tr>
<td align="left">补码</td>
<td align="left">0本体</td>
<td align="left">按位取反+1(符号位始终为1)</td>
</tr>
<tr>
<td align="left">反码</td>
<td align="left">0本体</td>
<td align="left">按位取反(符号位始终为1)</td>
</tr>
</tbody></table>
<h2 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h2><h5 id="有符号"><a href="#有符号" class="headerlink" title="有符号:"></a>有符号:</h5><h5 id="无符号"><a href="#无符号" class="headerlink" title="无符号:"></a>无符号:</h5><h2 id="3-位运算"><a href="#3-位运算" class="headerlink" title="3. 位运算"></a>3. 位运算</h2><h4 id="3-1-与-、或、异或"><a href="#3-1-与-、或、异或" class="headerlink" title="3.1 与 、或、异或"></a>3.1 与 、或、异或</h4><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>与(&amp;)</td>
<td>0&amp;0=0</td>
<td>1&amp;0=0</td>
<td>1&amp;1=1</td>
</tr>
<tr>
<td>或(|)</td>
<td>0|0=0</td>
<td>0|1=1</td>
<td>1|1=1</td>
</tr>
<tr>
<td>异或(^)</td>
<td>0^0=0</td>
<td>1^0=1</td>
<td>1^1=0</td>
</tr>
</tbody></table>
<h4 id="3-2-左移"><a href="#3-2-左移" class="headerlink" title="3.2 左移"></a>3.2 左移</h4><h6 id="m-lt-lt-n"><a href="#m-lt-lt-n" class="headerlink" title="m&lt;&lt;n"></a>m&lt;&lt;n</h6><p>表示把m左移n位。往左移n位的时候，最左边的n位将被丢弃，同时在最右边补上n个0.</p>
<p>exp：</p>
<p>00<u><strong>001010</strong></u>&lt;&lt;2=<u><strong>001010</strong></u>00</p>
<p>100<strong><u>01010</u></strong>&lt;&lt;3=<strong><u>01010</u></strong>000</p>
<h4 id="3-3-右移"><a href="#3-3-右移" class="headerlink" title="3.3 右移"></a>3.3 右移</h4><h6 id="m-gt-gt-n"><a href="#m-gt-gt-n" class="headerlink" title="m&gt;&gt;n"></a>m&gt;&gt;n</h6><p>表示把m右移n位。往右移的时候，最右边的n位将被丢弃。</p>
<p>如果数字之前是一个正数，则右移之后在最左边补n个0；</p>
<p>如果数字之前是一个负数，则右移之后在最左边补n个1.</p>
<p>exp:</p>
<p><u><strong>000010</strong></u>10&gt;&gt;2=00<u><strong>000010</strong></u></p>
<p><u><strong>10001</strong></u>010&gt;&gt;3=111<u><strong>10001</strong></u></p>
<h4 id="3-4-应用"><a href="#3-4-应用" class="headerlink" title="3.4 应用"></a>3.4 应用</h4><h5 id="3-4-1-移位运算代替乘除法"><a href="#3-4-1-移位运算代替乘除法" class="headerlink" title="3.4.1 移位运算代替乘除法"></a>3.4.1 移位运算代替乘除法</h5><h5 id="3-4-2-右移一位-除以2"><a href="#3-4-2-右移一位-除以2" class="headerlink" title="3.4.2 右移一位 == 除以2"></a>3.4.2 右移一位 == 除以2</h5><h5 id="3-4-3-左移一位-乘以2"><a href="#3-4-3-左移一位-乘以2" class="headerlink" title="3.4.3 左移一位 == 乘以2"></a>3.4.3 左移一位 == 乘以2</h5><h6 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        ++count;</span><br><span class="line">        n = (n<span class="number">-1</span>) &amp; n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="不用加减法做加法"><a href="#不用加减法做加法" class="headerlink" title="不用加减法做加法"></a>不用加减法做加法</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum,carry;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum = num1 ^ num2;</span><br><span class="line">        carry = (num1 &amp; num2) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        num1 = sum;</span><br><span class="line">        num2 = carry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(num2 !=<span class="number">0</span> );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> num1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>深拷贝与浅拷贝</title>
    <url>/2019/11/20/Python3.-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<p>Python代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foo &#x3D; [1,2]</span><br><span class="line">foo1 &#x3D; foo</span><br><span class="line">foo.append(3)</span><br></pre></td></tr></table></figure>
<p>输出foo和foo1的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foo &#x3D; [1,2,3]</span><br><span class="line">foo1 &#x3D; [1,2,3]</span><br></pre></td></tr></table></figure>
<p>foo1 和 foo指向同一内存地址，foo.append(3)foo中添加了3，相应foo1也添加了3</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;www.nowcoder.com&#x2F;questionTerminal&#x2F;0d4af069d7d3417ba772ed93331f9057</span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line">import copy</span><br><span class="line">a &#x3D; [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;]] </span><br><span class="line">b &#x3D; a </span><br><span class="line">c &#x3D; copy.copy(a) </span><br><span class="line">d &#x3D; copy.deepcopy(a) </span><br><span class="line">a.append(5) </span><br><span class="line">a[4].append(&#39;c&#39;)</span><br></pre></td></tr></table></figure>
<p>解析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;www.nowcoder.com&#x2F;questionTerminal&#x2F;0d4af069d7d3417ba772ed93331f9057</span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line">import copy</span><br><span class="line">a &#x3D; [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;]] </span><br><span class="line">b &#x3D; a     # 引用，除非直接给a重新赋值，否则a变则b变，b变则a变</span><br><span class="line">c &#x3D; copy.copy(a)   # 浅复制，只会拷贝父对象， 不会拷贝父对象中的子对象，所以若a的子对象变则c 变,但是父对象变c不会变</span><br><span class="line">d &#x3D; copy.deepcopy(a) #深拷贝，完全拷贝，完全独立于原对象，a变也不变</span><br><span class="line">a.append(5) # 改变父对象</span><br><span class="line">a[4].append(&#39;c&#39;)  #改变父对象中的 [&#39;a&#39;, &#39;b&#39;]子对象</span><br><span class="line"></span><br><span class="line"># a&#x3D;[1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;,&#39;c&#39;],5] </span><br><span class="line">b&#x3D;[1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;,&#39;c&#39;],5] </span><br><span class="line">c&#x3D;[1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;,&#39;c&#39;]] </span><br><span class="line">d&#x3D;[1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;]]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>拷贝</tag>
      </tags>
  </entry>
  <entry>
    <title>hr面题库</title>
    <url>/2020/04/15/hr%E9%9D%A2%E9%A2%98%E5%BA%93/</url>
    <content><![CDATA[<p> [TOC]</p>
<h1 id="自我相关"><a href="#自我相关" class="headerlink" title="自我相关"></a>自我相关</h1><h2 id="1-请你做一下自我介绍"><a href="#1-请你做一下自我介绍" class="headerlink" title="1.请你做一下自我介绍"></a>1.请你做一下自我介绍</h2><p>​    按照正常方式，再做一次自我介绍  </p>
<h2 id="2-你认为自己最大的优点是什么？"><a href="#2-你认为自己最大的优点是什么？" class="headerlink" title="2.你认为自己最大的优点是什么？"></a>2.你认为自己最大的优点是什么？</h2><p> 我认为我的优点可以分为三个方面：  </p>
<p>（1）头脑清醒，思路清晰，遇事沉着冷静，能分清事情的轻重缓急。  </p>
<p>（2）工作有计划、有条理。能积极主动做需要做的事，而不是等别人要求你去做。  </p>
<p>（3）我的适应能力强，且求知欲也很强，能够不断的学习、上进。  </p>
<h2 id="3-你认为自己最大的缺点是什么？"><a href="#3-你认为自己最大的缺点是什么？" class="headerlink" title="3.你认为自己最大的缺点是什么？"></a>3.你认为自己最大的缺点是什么？</h2><p>这个问题更不好回答，说深了，会让面试官觉得你这个人不太行。如果求职者说自己小心眼、爱忌妒人、非常懒、脾气大、工作效率低，企业肯定不会录用你。要是说浅了，又会让人觉得自己不够深入客观的面对自己的缺点。大家绝对不要自作聪明地回答“我最大的缺点是过于追求完美”，有的人以为这样回答会显得自己比较出色，但事实上，他已经岌芨可危了。企业喜欢求职者从自己的优点说起，中间加一些小缺点，最后再把问题转回到优点上，突出优点的部分，企业喜欢聪明的求职者。比方说，你可以这么回答：我性子急，别人都嫌我督促工作时催的太紧。好多事我都事必躬亲，没有放手让下属去做。  </p>
<h2 id="4-最能概括你自己的三个词是什么？"><a href="#4-最能概括你自己的三个词是什么？" class="headerlink" title="4.最能概括你自己的三个词是什么？"></a>4.最能概括你自己的三个词是什么？</h2><p>诚实可信、适应能力强、敢于担当  </p>
<h2 id="5-别人是怎么评价你的？"><a href="#5-别人是怎么评价你的？" class="headerlink" title="5.别人是怎么评价你的？"></a>5.别人是怎么评价你的？</h2><p>HR是想从侧面了解一下，你跟同事之间的关系。</p>
<p>你可以这么去说：我的同事都认为我是一个动手能力强，做事有始有终的人。其实很多事情我喜欢自己去验证答案，所以我很愿意亲自去动手做自己想做的事情，一旦我做了我也会把它做到最好。我认为在做每一件事情的过程中我可以收获很多。  </p>
<h2 id="6-你最近5年的职业规划是什么？"><a href="#6-你最近5年的职业规划是什么？" class="headerlink" title="6.你最近5年的职业规划是什么？"></a>6.你最近5年的职业规划是什么？</h2><p>这个问题最忌讳的回答是我不知道、我没想过。企业都喜欢有进取心的人。不一定偏要回答，想要做管理岗位。毕竟一个公司的管理岗位还是数量不多的。所以你可以立足于自己的技术长项，来规划自己的职业发展。比方说，我现在更多的是运用后台的框架和技术，在五年里，我希望我能更深入的了解公司所用的框架，我想先成为想全栈工程是那样的多面手，然后有能力参与架构设计，我最终的目标是想成为系统架构师。各位同学可以根据我这个示范，做一些修改，把自己对技术专研积极进取的那一面凸显出来。  </p>
<h2 id="你每天第一个小时和最后一个小时都在做什么？"><a href="#你每天第一个小时和最后一个小时都在做什么？" class="headerlink" title="你每天第一个小时和最后一个小时都在做什么？"></a>你每天第一个小时和最后一个小时都在做什么？</h2><p>这个问题是考察你对时间的安排，你可以这样去说：每天上班之后，第一件事情就是召开部门工作晨会，对当前的工作进行小结，汇报进度，然后安排下一步工作。下班前我会对当天的工作进行小结，尽量做到当日事当日毕，然后计划第二天的工作及晨会内容。  </p>
<h2 id="你做过那些事，你认为比较成功？"><a href="#你做过那些事，你认为比较成功？" class="headerlink" title="你做过那些事，你认为比较成功？"></a>你做过那些事，你认为比较成功？</h2><p>我在上家公司期间，我组织同事们共同完成了新车贷款模块的开发，保证了本公司能在2018年9月成功上线新车销售业务，让我们的APP日活用户从70万，上升到160万，我觉得这件事，是我们研发四部，包括我本人，最成功的一件事情。  </p>
<h2 id="你做过哪件事，你认为比较失败？"><a href="#你做过哪件事，你认为比较失败？" class="headerlink" title="你做过哪件事，你认为比较失败？"></a>你做过哪件事，你认为比较失败？</h2><p>面试官问你做过最失败的事情，其实他并不是在意这个结果，而是想了解应聘者在这次“失败”中处理问题的方法，以及个人对失败的态度，从而考察其学习能力和应变能力。一个成功的“失败经历”可以体现一个人的专业程度，但如果表达过于夸张，会让面试官对你的能力产生怀疑；而如果你说自己没有失败经历，恐怕更会贻笑大方。回答这个问题的重点应落在“经历”上，而非“失败”上。面试官不仅想了解你对失败的态度，因为任何人都知道此时应该保持积极的心态，他们更想要听到货真价实的内容。  我们公司在2017年遇到了融资的困境，不得不砍掉了一些很好的业务和功能体验。比如说那时候我们部门和另外一个部门联合搞了AR看车，这个技术非常的前沿，当时的二手车APP，只有我们在研发这个功能。比如说用户拿手机对着办公桌，开启了AR看车功能，然后在手机屏幕上就出现了投射在桌面上的虚拟二手车。用户可以旋转手机，查看二手车的各个角度，包括还能拉开车门，查看里面的驾驶室。因为这个功能研发费用，包括后面采集二手车的AR信息，都要投入很大的资本，在经济紧缩的大背景下，AR看车这个功能最后还是被砍掉了。这件事情的结果，我们部门，包括我个人，都觉得非常遗憾和失败。</p>
<h2 id="你有什么业余爱好？"><a href="#你有什么业余爱好？" class="headerlink" title="你有什么业余爱好？"></a>你有什么业余爱好？</h2><p>面试官的时间都是很宝贵的，不可能会问一些没有目的性的问题。HR是想通过<br>求职者的业余爱好，来了解你的个性、品德、喜好与心态等方面的情况，借此可<br>以从侧面看出求职者的人格结构和生活的丰富性。别忘了你是在面试，不好的爱<br>好和不符合自己职业需求的爱好不能说。所以你可以说，我喜欢在工作之余浏览<br>技术文章，并且写技术博客，把我解决的技术问题总结成博客文章，总结的过程<br>就是重新复习了一遍当初解决问题的过程，所以这些年我都是通过这种方式来巩<br>固自己的技术水平。再有就是我平时喜欢研究树莓派这种IOT的设备，写点<br>Python程序控制硬件设备，还挺有意思的。</p>
<h2 id="你最喜欢的书籍是什么？"><a href="#你最喜欢的书籍是什么？" class="headerlink" title="你最喜欢的书籍是什么？"></a>你最喜欢的书籍是什么？</h2><p>大家尽量说本专业内的书籍。比如说，我喜欢看《人月神话》这本书，因为这本<br>书介绍了大量的工程实践经验。还有就是《Effective Java》这本书，因为这本<br>书的作者写了Java API，这本书一共提到了57条Java程序优化经验，我觉得非<br>常有意义。还有就是《设计模式》这本书，设计模式几乎是成为系统架构师的必<br>读内容，23种设计模式真的是太棒了，高内聚、低耦合的设计思想，应该贯穿<br>程序开发的始终。其他的书籍我也看了很多，只是觉得这三本书最有意义。</p>
<h2 id="你认为什么是成功？"><a href="#你认为什么是成功？" class="headerlink" title="你认为什么是成功？"></a>你认为什么是成功？</h2><p>成功就是达成所设定的目标。成功是一种积极的感觉，它是每个人达到自己理想<br>之后一种自信的状态和一种满足的感觉！如果找到成功的规律，成功就变成了非<br>常简单的事情！成功没捷径，要有强烈的欲望，付出比别人更多的努力。</p>
<h2 id="你认为什么是失败？"><a href="#你认为什么是失败？" class="headerlink" title="你认为什么是失败？"></a>你认为什么是失败？</h2><p>失败就是没有达到预期目的或是输给对方。失败也是一种感觉，一种绝望的感<br>觉。失败并不可怕，关键是对待失败的认识和态度。失败对弱者是一次打击，对<br>强者却是一次激励。无数人的失败，都是失败于做事情不彻底，往往做到离成功<br>只差一步就停下来。</p>
<h1 id="岗位相关"><a href="#岗位相关" class="headerlink" title="岗位相关"></a>岗位相关</h1><h2 id="7-你从上一家公司离职的原因是什么？"><a href="#7-你从上一家公司离职的原因是什么？" class="headerlink" title="7.你从上一家公司离职的原因是什么？"></a>7.你从上一家公司离职的原因是什么？</h2><p>这个问题也有很多忌讳，同学们千万不要说上一家公司的坏话，比如说跟领导不和、管理混乱、人际关系复杂、公司不注重人才，薪资待遇给的不够。就算在前一个工作受到再大的委屈，对公司有多少的怨言，都千万不要表现出来，尤其要避免对公司本身主管的批评，避免面试官的负面情绪及印象。建议此时最好的回答方式是将问题归咎在自己身上，找一些不会损害自身能力的理由。比如说，我搬家了，距离上一家公司太远了，所以我想找一个离自己住的地方近一些的公司。再比如，我家是青岛的，但是我女朋友是北京人，她在北京找到工作了，所以我就从青岛的实习公司离职了，来北京定居找一份开发的工作。这样的回答就特别好，把离职的原因说成了不可抗拒的因素，又没有批评上一家公司，这个回答是合格的。</p>
<h2 id="你怎么理解你应聘的职位？"><a href="#你怎么理解你应聘的职位？" class="headerlink" title="你怎么理解你应聘的职位？"></a>你怎么理解你应聘的职位？</h2><p>我应聘的Java软件工程师，因为我之前在上一家公司做过电商系统，所以我了解这个岗位的开发工作都有哪些。参与需求分析，项目评审，根据电商系统的业务特点，完成程序的开发工作。除了我们自己写一些单体测试，还要协助测试人员完成集成测试和系统测试。公司有新入职的员工，我有时候还要去指导新员工以及实习生等等。  </p>
<h2 id="你的工作出现失误怎么办？"><a href="#你的工作出现失误怎么办？" class="headerlink" title="你的工作出现失误怎么办？"></a>你的工作出现失误怎么办？</h2><p>我会立即核对工作失误造成的损失，然后跟上级沟通，并且及时作出弥补的方案。假设说，我开发的支付模块出现了BUG，用户的银行账户已经扣款，但是订单显示并没有支付成功，用户打电话投诉。遇到这个失误，我会先核对账单数据，有多少顾客付款成功，却显示未支付的。然后立即跟上级汇报这个事情，由领导决策是否暂停这个商品的销售。并且我要马上收集这些顾客支付的日志，查找故障原因。每隔一小段时间，汇报一次故障检修的进度，直到解决问题，商品销售恢复正常。我犯下的过错，我有勇气承担后果，接受公司上级的处罚决定，并且总结和反思这次技术故障，把故障原因和解决方案写成文档，提交给上级技术部门。</p>
<h2 id="1-你对我们公司了解多少？"><a href="#1-你对我们公司了解多少？" class="headerlink" title="1.你对我们公司了解多少？"></a>1.你对我们公司了解多少？</h2><p>如果求职者回答不上来，就说明这个人是海投的简历，根本没有认真了解公司的背景和工作岗位的要求，自己都没有先审视一下，是否跟这家公司和应聘岗位是否匹配，那么HR也不会帮你做决定的，所以海投简历的人很多都被淘汰了。所以你去面试之前，一定要先了解这家公司的业务背景，和你应聘岗位的具体要求。所以这道题，大家就按照百度百科上面的介绍，来讲一下这个公司的具体业务。</p>
<h2 id="2-你喜欢这份工作的哪一点？"><a href="#2-你喜欢这份工作的哪一点？" class="headerlink" title="2.你喜欢这份工作的哪一点？"></a>2.你喜欢这份工作的哪一点？</h2><p>每个人的价值观不同，自然评断的标准也会不同。就算你最看重的是这个岗位的薪资待遇，但是你决不能把这个想法透露出来。你应该围绕自己的技术爱好来说。你可以这样回答，我实习和工作期间，做的都是APP后台开发，我在这方面积累了大量的经验，这个岗位能让我充分发挥才能，所以我才想找一份类似的工作。</p>
<h2 id="你能为我们带来什么？"><a href="#你能为我们带来什么？" class="headerlink" title="你能为我们带来什么？"></a>你能为我们带来什么？</h2><p>企业很想知道新员工能为公司做什么，求职者应该重申自己的优势。因为你的工作经历并不是太多，所以不用强调自己的业绩，让公司日活用户提升了多少，或者给公司挽回了多少损失等等。<br>你就强调你可以做好本职工作就够了。你可以这样回答：我实习和工作期间，都是从事APP后台开发，所以这个领域我比较擅长，所以我能在新的岗位上发挥我的才能，保证APP新业务的按时上线，并且维护好现有模块。</p>
<h2 id="你申请的这个岗位，你认为你还欠缺什么？有哪些可预见的困难？"><a href="#你申请的这个岗位，你认为你还欠缺什么？有哪些可预见的困难？" class="headerlink" title="你申请的这个岗位，你认为你还欠缺什么？有哪些可预见的困难？"></a>你申请的这个岗位，你认为你还欠缺什么？有哪些可预见的困难？</h2><p>企业喜欢问求职者弱点，但精明的求职者一般不直接回答。企业希望看到这样的求职者：继续重复自己的优势。你可以这样说：对于这个职位和我的能力来说，我相信自己是可以胜的，如果遇到技术难题，我会请教团队内的前辈，而且我的学习能力很强，我相信可以很快融入公司的企业文化，进入工作状态。</p>
<h2 id="如果录用你，你该如何开展工作？"><a href="#如果录用你，你该如何开展工作？" class="headerlink" title="如果录用你，你该如何开展工作？"></a>如果录用你，你该如何开展工作？</h2><p>先了解企业的规章制度，严格遵守公司纪律。学习项目里的知识和技术，以及作<br>业流程，严格按照项目流程工作。工作之余多与同事交流，多学习大家在工作上<br>的窍门。总结规范自己的工作流程，缩短自己与同事在工作上的差距。</p>
<h2 id="你能在我们公司干多久？"><a href="#你能在我们公司干多久？" class="headerlink" title="你能在我们公司干多久？"></a>你能在我们公司干多久？</h2><p>几乎没有面试官会相信“永远”二字，这是一个不切实际的答案。其实HR并不在<br>乎你在回答中，说要在公司工作多长时间，企业在乎的是你在公司现阶段的态<br>度。你可这么说，直到我无法再接受新事物，并且公司也认为我不适合这个岗位<br>了，我就会选择离开。只要在岗位上工作一天，就要承担一天的责任，为公司创<br>造一天的效益。</p>
<h2 id="工作中你不适合这个岗位，你该怎么办？"><a href="#工作中你不适合这个岗位，你该怎么办？" class="headerlink" title="工作中你不适合这个岗位，你该怎么办？"></a>工作中你不适合这个岗位，你该怎么办？</h2><p>如果差距较小，能通过刻苦学习或更多的付出，能适合这个岗位，我会付出更多<br>的努力；如果根本不适合，差距较大，我会立刻离开，换一个环境，这样对单位<br>和个人都有好处。</p>
<h2 id="你对薪资的要求是什么"><a href="#你对薪资的要求是什么" class="headerlink" title="你对薪资的要求是什么"></a>你对薪资的要求是什么</h2><p>（1）第一种回答是，直接讲明自己对薪资的要求。要注意的是，如此理直气壮<br>地回答，前提是你有谈薪的资本。也就是说，你确实能够胜任这份工作，你的简<br>历内容很丰富，你在前一份工作上做出很好的成绩。用实力说话，满足HR的期<br>待值，才能谈到高薪。<br>（2）另一种回答是，多讲大道理和职业远景，这样的回答适用于大部分选择跳<br>槽，却没有亮眼成绩的求职者。你不要怕说具体的数字，只是不要说得太高，基<br>本上这个岗位的平均工资或者稍微偏上一点点即可。即便你说的稍微高了一些，<br>HR要是很看好你，他会直接跟你说，目前来说这个岗位还满足不了你的薪资要<br>求，我们能给出这个数字的待遇，你能接受吗？如果你觉得可以，就接受下来。<br>如果不能接受，就拒绝好了。如果企业根本不看好你，HR是不会跟你讲这个岗<br>位的工资上限的，所以放心说具体数字好了，但是一定要保守一点。你可以这么<br>去说，跟薪资相比，我更看重的是职业发展，我相信贵公司在处理这个问题上，<br>能根据我的实际情况和现在的市场行情，给我一个合理的薪水，目前我的期望是<br>能达到年薪八万这个水平。</p>
<h1 id="管理相关"><a href="#管理相关" class="headerlink" title="管理相关"></a>管理相关</h1><h2 id="你认为领导的方法不是最好的时候怎么办？"><a href="#你认为领导的方法不是最好的时候怎么办？" class="headerlink" title="你认为领导的方法不是最好的时候怎么办？"></a>你认为领导的方法不是最好的时候怎么办？</h2><p> 这个问题很有难度，这是在考察你在公司中的管理原则问题。你一味地强调自己的立场，反而会适得其反。如果你一味地服从领导的指示，HR又会觉得你这个人没有主见，没缺少创造力。你可以这么说：首先我会服从，在执行过程中进行完善。然后我会找适当的机会给领导提出我的建议，交换一下看法，最后我还是不折不扣的坚决执行上级领导的指令。  </p>
<h2 id="你的领导总是将责任推给你怎么办？"><a href="#你的领导总是将责任推给你怎么办？" class="headerlink" title="你的领导总是将责任推给你怎么办？"></a>你的领导总是将责任推给你怎么办？</h2><p>  这个问题的主要目的是考察你与上级的配合程度。你可以这样回答：在工作中我们要以工作为重，坚持原则，服从领导，但不盲从，针对题中出现的这种情况我会从容面对，从大局出发，以工作为重，具体问题具体分析。首先，我要反思一下自己在这次事故中是否有责任，如果有责任我要勇于承担责任，并吸取教训，避免类似事件的发生。其次，如果事故还有挽回的余地，并且在我的权限范围内，又不违背原则的话，我会积极的承担起责任，并尽全力把事故危害降到最低。现在领导把责任推给我，可能是出于为公司的整体发展和各方面的共赢结果等角度考虑的，那么我也要勇于分担领导的焦虑，承担起责任，积极处理事件。如果此次事件已经是违背原则的，或者不在我职权范围内，我也要和领导沟通，表明我的态度，这样的责任我不会承担的。我认为在工作中是个人的责任或者出于为集体利益着想，不违背原则的责任，委屈个人，成全集体，勇于担当也是对年轻人的锻炼，但是对于违背原则的事件我们也不能盲从。</p>
<h2 id="工作中，你难以跟上级、同事相处怎么办？"><a href="#工作中，你难以跟上级、同事相处怎么办？" class="headerlink" title="工作中，你难以跟上级、同事相处怎么办？"></a>工作中，你难以跟上级、同事相处怎么办？</h2><p>  这个问题的主要目的是考察你对周围环境的适应能力。首先我会更加谨慎的工作，坚决服从领导的指挥，积极配合同事的工作。然后我会从自身找原因，仔细分析是不是自己工作做得不好让领导不满意，同事看不惯。还要看看是不是为人处世方面做得不好。如果是这样的话我会努力改正。如果我找不到原因，我会找机会跟他们沟通，请他们指出我的不足。有问题就及时改正。作为优秀的员工，应该时刻以大局为重，即使在一段时间内，领导和同事对我不理解，我也会做好本职工作，虚心向他们学习，我相信，他们会看见我在努力，总有一天会对我微笑的！  </p>
<h2 id="如果你手头工作没有完成，上级又给你分配了新的任务，你如何处理这个矛盾？"><a href="#如果你手头工作没有完成，上级又给你分配了新的任务，你如何处理这个矛盾？" class="headerlink" title="如果你手头工作没有完成，上级又给你分配了新的任务，你如何处理这个矛盾？"></a>如果你手头工作没有完成，上级又给你分配了新的任务，你如何处理这个矛盾？</h2><p>我会先答应领导的安排，然后评估工作难度和时长，跟领导汇报这个工作的技术难点在哪里，工时有多少，请示领导这份工作是否要继续执行，新旧工作应该哪个优先？如果领导坚持这个工作由我来完成，我愿意接受这次工作的历练。</p>
<h2 id="你能谈谈你上司的工作吗？"><a href="#你能谈谈你上司的工作吗？" class="headerlink" title="你能谈谈你上司的工作吗？"></a>你能谈谈你上司的工作吗？</h2><p>有些人非常喜欢夸大自己的功劳，埋没其他人的作用。这样的人在面试中，就往往会表现出对自己上司的工作，持一种漠不关心的态度。这道问题就是要看求职者是不是一个这样的人。通过你的回答，HR也可以考察一下，你的简历是否属实。因为一个编造简历的人，往往在回答问题的细节时，会暴露出一些前后不一致的地方。  我做二手车交易APP项目的时候，在项目四部，我们这个项目组负责的是二手车交易的贷款和担保业务，我们部门的领导工作的内容是，根据公司的发展战略，制定新产品的开发方案，并且把公司决策执行到位。我们部门的领导全面负责技术部工作，直接对总经理和技术总监负责。他还要制定技术目标和工作方案，加强部门合作，提供技术支持，还有就是加强技术队伍建设和管理，定期进行技术分析和质量分析工作，制定预防和纠正措施。  </p>
<h2 id="如果让你管理一个小团队，你应该怎么管理？"><a href="#如果让你管理一个小团队，你应该怎么管理？" class="headerlink" title="如果让你管理一个小团队，你应该怎么管理？"></a>如果让你管理一个小团队，你应该怎么管理？</h2><p>如果是管理新入职的实习生，或者应届生，我会采用家长式的管理模式。因为很多实习生不知道自己适合做什么，能不能做好什么，都特别迷茫。如果不能激发他们的工作积极性，对公司来说也是一笔损失。所以我会先对他们做一个职业规划，让他们知道怎么能跟现有工作契合的情况下，提升技术和经验。其实，就是帮他们制定一个工作计划。如果我管理的是有经验的程序员，我会以任务为导向，来管理这个团队。我会尊重并且信任我的下属，努力提升这个团队的执行力。我在任何时候都不会替他们完成任务，培养他们的责任心和执行力。  </p>
<h1 id="加班问题"><a href="#加班问题" class="headerlink" title="加班问题"></a>加班问题</h1><h2 id="1-996怎么看"><a href="#1-996怎么看" class="headerlink" title="1.996怎么看"></a>1.996怎么看</h2><p>我理解公司会有着急的项目，会有紧急的工作。作为员工，我愿意帮公司救急。毕竟公司有着急的时候，员工个人也有着急需要请假的时候。大家都是可以互相理解的。但是救急不救穷，常态化加班，我肯定无法接受。</p>
<h2 id="2-负责的项目凌晨突然3点出现问题，你作为核心怎么处理"><a href="#2-负责的项目凌晨突然3点出现问题，你作为核心怎么处理" class="headerlink" title="2.负责的项目凌晨突然3点出现问题，你作为核心怎么处理"></a>2.负责的项目凌晨突然3点出现问题，你作为核心怎么处理</h2><p>自己作为项目核心，项目出问题，是有一定责任的。如果我此时精神特别好或者项目很紧急、出现重大问题，起床，打开电脑，连接到公司内网，排查项目问题，重新上线，再请半天假休息下；如果项目并没有出现太大的问题或者我已经996好几天了，等休息好了，第二天到公司再排查问题。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="你怎么处理别人的批评？"><a href="#你怎么处理别人的批评？" class="headerlink" title="你怎么处理别人的批评？"></a>你怎么处理别人的批评？</h2><p>首先要理性的对待他人的批评，先检讨自己是不是工作和沟通做的不到位，然后积极沟通化解矛盾。其实同事之间的矛盾都不大，所以诚心诚意的去解决就好了。反过来想一想，别人的批评对我也是一种鞭策。  </p>
<h2 id="如果工作很繁忙，你如何提高工作效率？"><a href="#如果工作很繁忙，你如何提高工作效率？" class="headerlink" title="如果工作很繁忙，你如何提高工作效率？"></a>如果工作很繁忙，你如何提高工作效率？</h2><p>我会根据事情的轻重缓急，来决定先做什么，后作什么。  </p>
<h2 id="如何与他人进行技术辩论"><a href="#如何与他人进行技术辩论" class="headerlink" title="如何与他人进行技术辩论"></a>如何与他人进行技术辩论</h2><h2 id="出差接受程度"><a href="#出差接受程度" class="headerlink" title="出差接受程度"></a>出差接受程度</h2><h2 id="谈谈你对跳槽的看法？"><a href="#谈谈你对跳槽的看法？" class="headerlink" title="谈谈你对跳槽的看法？"></a>谈谈你对跳槽的看法？</h2><p>正常的跳槽能促进人才的合理流动，应该支持；但是频繁的跳槽对企业和个人都<br>不利，应该反对。现在有很多年轻人，一言不合，受一些挫折就离职跳槽。我反<br>对这种行为，因为我们这个行业有35岁中年职业危机一说，频繁的跳槽，不能<br>深入理解一个项目的业务和技术架构，只做一些表面的修修补补工作，对技能的<br>提升和经验的积累都没好处，所以频繁跳槽的人，到最后只会被这个行业淘汰。</p>
<h2 id="你怎样看待学历和能力？"><a href="#你怎样看待学历和能力？" class="headerlink" title="你怎样看待学历和能力？"></a>你怎样看待学历和能力？</h2><p>学历虽然不是最重要的，却也是一个人学习能力的体现，虽然不能直接和工作能<br>力划等号，但是如果一个人学习能力很好，接受能力也会比较强，能更快适应工<br>作，但是起决定性作用的，还是一个人对工作的热衷和刻苦程度。</p>
<h2 id="你还有什么要问的吗？"><a href="#你还有什么要问的吗？" class="headerlink" title="你还有什么要问的吗？"></a>你还有什么要问的吗？</h2><p>HR的这个问题看上去可有可无，其实很关键，企业不喜欢说“没有问题”的人，<br>因为其很注重员工的个性和创新能力。企业不喜欢求职者问个人福利之类的问<br>题，如果有人这样问：贵公司对新入公司的员工有没有什么培训项目，我可以参<br>加吗？或者说贵公司的晋升机制是什么样的？企业将很欢迎，因为体现出你对学<br>习的热情和对公司的忠诚度以及你的上进心。</p>
<h2 id="你还有什么需要我们知道的吗？"><a href="#你还有什么需要我们知道的吗？" class="headerlink" title="你还有什么需要我们知道的吗？"></a>你还有什么需要我们知道的吗？</h2><p>也许应聘者觉得没有什么可说的了。但这是一个事半功倍的极好机会。要是放弃<br>了就太可惜了。聪明的应聘者会简短地作答，但是却能充分的强调自己的强项、<br>成就、技能、以及知识领域。你可以这样去说，我们谈的很详细了，但我还想强<br>调一下：我有能力、也有信心胜任这个岗位，也认为能为公司做出积极的贡献。</p>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>hr面</tag>
      </tags>
  </entry>
  <entry>
    <title>2020TW暑假实习面经</title>
    <url>/2020/04/20/tw%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="了解思特沃克"><a href="#了解思特沃克" class="headerlink" title="了解思特沃克"></a>了解思特沃克</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ThoughtWorks是一家全球软件设计与定制领袖企业，ThoughtWorks的业务模式主要通过咨询帮助改善企业的IT组织，改进软件开发方法，以软件带动企业业务发展。ThoughtWorks<strong>并非一家劳动密集型企业，不以人才扩张为支撑业务发展</strong>的基础。ThoughtWorks以发展<strong>高、精、尖</strong>的创新业务设计和创意咨询为主要业务内容，以高端人才带动整个产业的理念革新和方法进步，促进整个产业链的健康生态循环。ThoughtWorks服务的客户重视软件开发方法，重视软件对业务发展至关重要的作用；鼓励创意设计，寻求创新的业务模式以占据企业翘楚。通过定制软件开发，ThoughtWorks为客户提供集创意设计、开发及交付为一体的定制服务。</p>
<h2 id="工作地点"><a href="#工作地点" class="headerlink" title="工作地点"></a>工作地点</h2><ul>
<li>北京</li>
<li>上海</li>
<li>深圳</li>
<li>武汉</li>
<li>成都</li>
<li>西安</li>
</ul>
<h2 id="岗位"><a href="#岗位" class="headerlink" title="岗位"></a>岗位</h2><ul>
<li>PM    产品经理</li>
<li>Dev   软件开发人员</li>
<li>BA    业务需求分析师，承接某个具体业务需求的产品经理就叫BA</li>
<li>QA    在软件开发过程中做好软件质量分析和保证的人员</li>
<li>UX    用户体验人员</li>
<li>UT    单元测试</li>
</ul>
<h2 id="官方技术网站"><a href="#官方技术网站" class="headerlink" title="官方技术网站"></a>官方技术网站</h2><ul>
<li><a href="https://insights.thoughtworks.cn/" target="_blank" rel="noopener">ThoughtWorks洞见</a>（微信公众号:ThoughtWorks洞见）</li>
</ul>
<h2 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h2><ul>
<li>敏捷(Scrum+XP)开发</li>
<li>结对编程</li>
<li>DevOps </li>
<li>DDD 领域驱动设计</li>
<li>TDD  测试驱动开发</li>
</ul>
<h1 id="招聘流程"><a href="#招聘流程" class="headerlink" title="招聘流程"></a>招聘流程</h1><h2 id="1-线上测评-0-5h-性格测评"><a href="#1-线上测评-0-5h-性格测评" class="headerlink" title="1.线上测评(0.5h)+性格测评"></a>1.线上测评(0.5h)+性格测评</h2><h3 id="行测题目"><a href="#行测题目" class="headerlink" title="行测题目"></a>行测题目</h3><ol>
<li>文字主旨/推理 * 10</li>
<li>图表题 * 11</li>
<li>图形规律 * 9</li>
<li>98题，性格测评，时间充足。</li>
</ol>
<p><strong>声明：好好作答，这部分测试也会挂人，不要以为不重要。</strong></p>
<h2 id="2-技术测评-2h-面试-0-5h"><a href="#2-技术测评-2h-面试-0-5h" class="headerlink" title="2.技术测评(2h)+面试(0.5h)"></a>2.技术测评(2h)+面试(0.5h)</h2><p>一道综合大题，时间2小时，共三问，不强求AC，但需要方案及实现过程</p>
<p><strong>划重点：不要切屏，不要切屏，不要切屏</strong></p>
<ol>
<li>保持在题目界面不要离开，</li>
<li>视作离开的情况：<ol>
<li>点击底部栏(第一次我关网xx音乐，账号作废</li>
<li>切换到另一个网页(第二次收到邮件，手贱切了下，账号又作废了)</li>
</ol>
</li>
<li>多准备几张干净的草稿纸(需要拍照转word或者pdf)</li>
</ol>
<p>tips:</p>
<ol>
<li>切屏账号自动作废，很麻烦，可以向账号提供商要一个。（我那天换了三个号</li>
<li>如果收件箱没有邮件，一定是被归到广告（垃圾）邮件去了。</li>
</ol>
<h3 id="具体要求"><a href="#具体要求" class="headerlink" title="具体要求"></a>具体要求</h3><ol>
<li>写出所有方案</li>
<li>比较所有方案的优缺点</li>
<li>探测案例方案的选择和测试用例</li>
</ol>
<h3 id="面试环节"><a href="#面试环节" class="headerlink" title="面试环节"></a>面试环节</h3><p>面试之前，我又重新用画图软件将我方案的实现思路、流程图和所有(3种)方案画了出来。</p>
<p>面试首先是一个简短的自我介绍，然乎直奔主题。</p>
<p>然后我用的投屏，让面试官看我的桌面，我用做好的图片给面试官讲解思路。</p>
<p>首先是整体思路，先讲怎么做，再讲为什么，然后分析了各种方案的优缺点及实现难度，将一个东西拆分成多个，然后以模块化思想，进行复用；还有几种方案之间的依赖关系，如何选择合适的方案。</p>
<p>面试官提了两个问题：</p>
<p>​    1.一句话总结你的方案：</p>
<p>​        我的回答：拆分、组合、复用</p>
<p>​    2.你需要多久能实现你的方案，可能会遇到什么问题？</p>
<p>​        根据自己的思路作答即可</p>
<p>面完之后，面试官会问你有什么想问你的，我问了tw实习生的暑期实习会做些什么，同时表明了强烈的想去tw(tw实习开启后，秒投简历)。</p>
<h3 id="面试感觉"><a href="#面试感觉" class="headerlink" title="面试感觉"></a>面试感觉</h3><p>这次面试的感觉很棒，跟以往的不一样(中大公司就问你简历上写的基础，我实在记不住那么多)。试我的是一个资深软件工程师(15年工作经验)，刚开始自我介绍有点紧张，深呼吸了下，面试官也很亲切的笑笑，示意我不用紧张。tw的面试不同以往的技术面，它从一个题目考察你的方案能力，项目分析、项目优化的能力，我个人还是比较享受这种面试的。</p>
<h3 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h3><p>这次面试完，我的状态先是由面试预约中变为线上测试(搞得我好慌，以为面试凉了)，然后过了两天又从线上测试变为面试预约，又过了一天，收到hr电话。</p>
<p>没有收到明确的感谢信之前，都没有凉（凉了会收到tw的感谢信）</p>
<h2 id="3-动机测试-25min-职业性格测试-25min"><a href="#3-动机测试-25min-职业性格测试-25min" class="headerlink" title="3.动机测试(25min)+职业性格测试(25min)"></a>3.动机测试(25min)+职业性格测试(25min)</h2><p>hr会发送做题链接的邮件，在规定时间内完成。测评也要好好答题，虽然不会挂，但hr可能会根据测评结果评估你是否符合公司。</p>
<h2 id="4-u加面（45min）"><a href="#4-u加面（45min）" class="headerlink" title="4.u加面（45min）"></a>4.u加面（45min）</h2><blockquote>
<p>两面试官问技术，hr估计在笔记（全程没提问）</p>
</blockquote>
<h3 id="1-自我介绍"><a href="#1-自我介绍" class="headerlink" title="1.自我介绍"></a>1.自我介绍</h3><h3 id="2-大学哪门课程带给你很大的帮助"><a href="#2-大学哪门课程带给你很大的帮助" class="headerlink" title="2.大学哪门课程带给你很大的帮助"></a>2.大学哪门课程带给你很大的帮助</h3><h3 id="3-项目面"><a href="#3-项目面" class="headerlink" title="3.项目面"></a>3.项目面</h3><h4 id="1-项目分工"><a href="#1-项目分工" class="headerlink" title="1.项目分工"></a>1.项目分工</h4><h4 id="2-自己承担的职位"><a href="#2-自己承担的职位" class="headerlink" title="2.自己承担的职位"></a>2.自己承担的职位</h4><h4 id="3-项目难点，如何解决"><a href="#3-项目难点，如何解决" class="headerlink" title="3.项目难点，如何解决"></a>3.项目难点，如何解决</h4><p>我提到了跨域问题，并说了跨域问题的解决，还有一些团队开发过程中沟通的问题。</p>
<p>面试官：为什么浏览器会禁止跨域</p>
<p>我：emmmm，忘了</p>
<h4 id="4-项目技术选型："><a href="#4-项目技术选型：" class="headerlink" title="4.项目技术选型："></a>4.项目技术选型：</h4><p>自己选的还是怎么选的？为什么这么选？</p>
<p>有和团队成员沟通过技术选型的问题吗？</p>
<h3 id="提问："><a href="#提问：" class="headerlink" title="提问："></a>提问：</h3><h5 id="公司对实习生有一个什么期望？"><a href="#公司对实习生有一个什么期望？" class="headerlink" title="公司对实习生有一个什么期望？"></a>公司对实习生有一个什么期望？</h5><p>快速学习的能力，适应环境</p>
<h5 id="你对我今天的面试，有什么评价或者建议？"><a href="#你对我今天的面试，有什么评价或者建议？" class="headerlink" title="你对我今天的面试，有什么评价或者建议？"></a>你对我今天的面试，有什么评价或者建议？</h5><p>改变应试教育的思维。工作不是考试，没有固定的答案，没有题库给你刷到高分。会遇到许多未知问题。</p>
<p>学习一些人文、社会学、心理学的东西。学会与周围的环境沟通交流。</p>
<h1 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h1><h2 id="2021届暑假实习"><a href="#2021届暑假实习" class="headerlink" title="2021届暑假实习"></a>2021届暑假实习</h2><p>3-16：实习招聘开始：投递简历</p>
<p>3-16：收到在线测评邮件，完成测评</p>
<p>3-20：收到面试预约邮件，完成预约</p>
<p>3-27：收到面试预约成功的邮件，并确定了调整的面试时间</p>
<p>4-6：收到远程面试邀请邮件</p>
<p>4-8：收到技术测评邮件和答案提交的邮件</p>
<p>4-9：技术测评</p>
<p>4-10：陈述技术测评方案</p>
<p>4-15：接到hr的电话，完成动机测试和性格测试，加了hr好友</p>
<p>4-16：hr通知下周一面试，发送邮件告知详细时间还有ZoomID</p>
<p>4-20：u加面</p>
<p>面试结果需等一周</p>
<h1 id="可参考的帖子"><a href="#可参考的帖子" class="headerlink" title="可参考的帖子"></a>可参考的帖子</h1><ul>
<li><a href="https://www.nowcoder.com/discuss/395229" target="_blank" rel="noopener">2020届春招面经之ThoughtWorks—软件开发工程师</a></li>
<li><a href="https://www.nowcoder.com/discuss/15668" target="_blank" rel="noopener">写一拨ThoughtWorks面经</a></li>
<li><a href="https://www.nowcoder.com/discuss/33839" target="_blank" rel="noopener">ThoughtWorks面试经历，干货满满</a></li>
<li><a href="https://www.nowcoder.com/discuss/90639" target="_blank" rel="noopener">ThoughtWork软开（成都）面试</a></li>
<li><a href="https://www.nowcoder.com/discuss/91874" target="_blank" rel="noopener">ThoughtWorks面经</a></li>
<li><a href="https://www.nowcoder.com/discuss/92270" target="_blank" rel="noopener">武汉Thoughtworks软开面经【已给offer】</a></li>
<li><a href="https://www.nowcoder.com/discuss/93326" target="_blank" rel="noopener">thoughtworks面经（offer已拿）</a></li>
<li><a href="https://www.nowcoder.com/discuss/96929" target="_blank" rel="noopener">thoughtWorks面经（刚收到offer）</a></li>
<li><a href="https://www.nowcoder.com/discuss/151667" target="_blank" rel="noopener">ThoughtWorks java开发18年秋招笔试题</a></li>
<li><a href="https://www.nowcoder.com/discuss/152333" target="_blank" rel="noopener">【ThoughtWorks内推】BA面经（已拿offer）</a></li>
<li><a href="https://www.nowcoder.com/discuss/220821" target="_blank" rel="noopener">thoughtworks凉经，C++(成都)</a></li>
<li><a href="https://www.nowcoder.com/discuss/223009" target="_blank" rel="noopener">thoughtworks面经，软开(西安)</a></li>
<li><a href="https://www.nowcoder.com/discuss/223445" target="_blank" rel="noopener">ThoughtWorks面试经历（武汉）</a></li>
<li><a href="https://www.nowcoder.com/discuss/227643" target="_blank" rel="noopener">Thoughtworks国际岗软开（非计算机专业）面经-西安</a></li>
<li><a href="https://www.nowcoder.com/discuss/240371" target="_blank" rel="noopener">2020秋招面经大汇总（ThoughtWorks）</a></li>
<li><a href="https://www.nowcoder.com/discuss/246188" target="_blank" rel="noopener">Thoughtworks面经分享</a></li>
<li><a href="https://www.nowcoder.com/discuss/248128" target="_blank" rel="noopener">Thoughtworks面经 感觉凉</a></li>
<li><a href="https://www.nowcoder.com/discuss/395229" target="_blank" rel="noopener">2020届春招面经之ThoughtWorks—软件开发工程师</a></li>
<li><a href="https://www.nowcoder.com/discuss/406227" target="_blank" rel="noopener">ThoughtWorks面经（非计软件开发base西安）</a></li>
<li><a href="https://www.nowcoder.com/discuss/411993?type=post&order=time&pos=&page=1&subType=2" target="_blank" rel="noopener">Thoughtworks2021届暑期实习面经 </a></li>
<li><a href="https://www.nowcoder.com/discuss/373028?type=2" target="_blank" rel="noopener">还愿thoughtworks(已拿offer）附个人面经</a></li>
</ul>
]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>思特沃克</tag>
        <tag>实习面经</tag>
      </tags>
  </entry>
  <entry>
    <title>线程-进程-协程</title>
    <url>/2020/03/20/%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B-%E5%8D%8F%E7%A8%8B/</url>
    <content><![CDATA[<p>Python中因为有GIL(全局解释器锁)的存在，例如，某个线程想要执行，必须先拿到GIL，我们可以把GIL看作“通行证”，并且在一个Python进程中，GIL只有一个。拿不到通行证的线程就不允许进入CPU执行。每次释放GIL锁，线程之间都会进行锁竞争，而切换线程会消耗资源。由于GIL锁的存在，Python里一个进程永远只能同时执行一个线程（拿到GIL的线程才能执行），这就是在多核CPU上Python的多线程效率不高的原因。</p>
<p>Python的多线程对于IO密集型代码比较友好，网络爬虫能够在获取网页的过程中使用多线程，从而加快速度。</p>
<table>
<thead>
<tr>
<th></th>
<th>优点</th>
<th>缺点</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td>多线程</td>
<td>Python的多线程对于IO密集型代码比较友好</td>
<td>多核CPU上Python的多线程效率不高</td>
<td>IO密集</td>
</tr>
<tr>
<td>多进程</td>
<td>提升对多核性能的利用</td>
<td>太消耗资源</td>
<td></td>
</tr>
<tr>
<td>协程</td>
<td>1.协程像一种在程序级别模拟系统级别的进程，由于是单线程，并且少了上下文切换，因此相对来说系统消耗很少，而且网上的各种测试也表明协程确实拥有惊人的速度。       2.协程方便切换控制流，这就简化了编程模型。协程能保留上一次调用时的状态（所有局部状态的一个特定组合），每次过程重入时，就相当于进入了上一次调用的状态。     3.协程的高扩展性和高并发性，一个CPU支持上万协程都不是问题，所以很适合用于高并发处理。</td>
<td>1.协程的本质是一个单线程，不能同时使用单个CPU的多核，需要和进程配合才能运行在多CPU上。         2.有长时间阻塞的IO操作时不要用协程，因为可能会阻塞整个程序。</td>
<td></td>
</tr>
</tbody></table>
<h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><p>0.单线程</p>
<p>1.基于_thread的多线程</p>
<p>2.基于threading的多线程</p>
<p>3.基于threading+Queue的多线程</p>
<p>4.基于Process + Queue的multiprocess多进程</p>
<p>5.基于Pool +Queue的multiprocess多进程</p>
<p>6.基于gevent的多协程</p>
<p>7.基于aiohttp的多协程</p>
<p>8.grequests</p>
<blockquote>
<p>Requests + Gevent = &lt;3 <a href="https://pypi.python.org/pypi/grequests" target="_blank" rel="noopener">https://pypi.python.org/pypi/grequests</a></p>
</blockquote>
<p>9.多线程+协程组合</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>线程</tag>
        <tag>进程</tag>
        <tag>协程</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么做自我介绍?</title>
    <url>/2020/02/15/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="讲什么？"><a href="#讲什么？" class="headerlink" title="讲什么？"></a>讲什么？</h1><p>自我=学习+工作+沟通</p>
<table>
<thead>
<tr>
<th>内容</th>
<th>时常</th>
<th>重要性</th>
</tr>
</thead>
<tbody><tr>
<td>个人信息</td>
<td>15秒</td>
<td>一般</td>
</tr>
<tr>
<td>学习经历</td>
<td>30秒</td>
<td>重要</td>
</tr>
<tr>
<td>工作经历</td>
<td>2分钟</td>
<td>重要</td>
</tr>
</tbody></table>
<h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><ul>
<li><p>姓名</p>
</li>
<li><p>学校</p>
</li>
<li><p>专业</p>
</li>
</ul>
<h2 id="学习经历"><a href="#学习经历" class="headerlink" title="学习经历"></a>学习经历</h2><ul>
<li>比赛</li>
<li>项目</li>
<li><strong>自学的东西</strong></li>
</ul>
<h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h2><ul>
<li>校内项目经历</li>
</ul>
<p>面试官你好，我是xx，来自于xx大学xx专业的，</p>
<h2 id="注意什么"><a href="#注意什么" class="headerlink" title="注意什么"></a>注意什么</h2><p>1.3分钟内</p>
<p>2.突出重点</p>
<p>3.你能干活</p>
<p>4.只谈跟工作相关的内容</p>
<p>5.不要紧张，语速正常，注视面试官，不要有小动作</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>自我介绍</tag>
      </tags>
  </entry>
</search>
